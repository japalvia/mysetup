Vim setup and commands
======================

Loading vimrc
-------------

Reload config without editor restart:
:so $MYVIMRC

Start without loading any vimrc:
vim -u NONE

Start with system defaults only:
vim -u /etc/vimrc


Plugins
-------

Install a plugin for pathogen using git submodule:
https://gist.github.com/romainl/9970697

git submodule add https://github.com/some/plugin.git dotfiles/.vim/bundle/plugin

Next, open vim and run :Helptags command to make the plugin doc available

New submodules must be initialized explicitly when using in another repo clone:
git submodule init && git submodule update

List loaded plugins/addons:
:scriptnames


Commands
--------

Rename word under cursor, all instances. Alternative to :%s/foo/bar/g when foo
is lenghtly or needs escaping:
- put cursor on word
- press * to search for the next occurrence
- type 'ciw' (change inner word)
- type new word
- press esc
- press n for next occurrence and press . (repeat)
- keep pressing n + .

Search for byte values, e.g. null byte:
/[\x0]

Scrolling:
zt puts current line to top of screen
z. or zz puts current line to center of screen
zb puts current line to bottom of screen

:retab      Convert all existing tabs to spaces

=           Re-indent selection

Indent current line in Insert mode (regardless of cursor position):
C-t

De-indent current line in Insert mode (regardless of cursor position):
C-d

Delete without yanking
<leader> d

Insert NUL byte (looks like ^@):
C-v 000

Moving around
-------------

^   To the first non-blank character of the line.

C-o Go to the previous location

[{  Go to matching bracket

Windows
-------

C-w c   Close current window but keep buffer open

C-w =   Resize windows after terminal size has changed

Using tags
----------

index recursively the current directory outside vim:
ctags -R .

index using easytags plugin in vim (tags stored ~/.vimtags):
:UpdateTags -R .

jump to tag definition:
Ctrl-]

pop tag (return to previous location):
Ctrl-T

taglist plugin, show tag window:
:TlistToggle

navigate between windows in vim:
Ctrl-[hjkl]


Cscope
-------

Install 'cscope' package
Install pycscope: sudo pip install pycscope

run in source root directory:
cscope -R -b

TODO: document cscope_dynamic usage


MiniBufExplorer
---------------

Switching between buffers:
Ctrl-^              previous buffer
num-ctrl-^          switch to buffer <num>num
Ctrl-hjkl and Tab   move to MBE window and select buffer with cursor


Alternate (a.vim)
-----------------

:A      Open header/source in the same window
:AS     Open header/source in new horizontal split


Clipboard (textobj-user, textobj-line)
--------------------------------------

.vimrc:
set clipboard=unnamed

Yank/delete text copies to system clipboard. Copying a line includes also the
newline character. To omit the newline use texobj-line:
vil     select inner part
val     select whole line

TODO: does clipmenu need configuration to sync primary and clipboard?

