Vim setup and commands
======================

Loading vimrc
-------------

Reload config without editor restart:
:so $MYVIMRC

Start without loading any vimrc:
vim -u NONE

Start with system defaults only:
vim -u /etc/vimrc


Plugins
-------

Install a plugin for pathogen using git submodule:
https://gist.github.com/romainl/9970697

Note: the target directory must be .vim/bundle/plugin
git submodule add https://github.com/some/plugin.git dotfiles/.vim/bundle/plugin

Next, open vim and run :Helptags command to make the plugin doc available

New submodules must be initialized explicitly when using in another repo clone:
git submodule init && git submodule update

List loaded plugins/addons:
:scriptnames

Load pathogen plugin without restarting vim:
:source ~/.vim/bundle/foobar/plugin/*.vim


Commands
--------

Rename word under cursor, all instances. Alternative to :%s/foo/bar/g when foo
is lenghtly or needs escaping:
- put cursor on word
- press * to search for the next occurrence
- type 'ciw' (change inner word)
- type new word
- press esc
- press n for next occurrence and press . (repeat)
- keep pressing n + .

Search for byte values, e.g. null byte:
/[\x0]

Scrolling:
zt puts current line to top of screen
z. or zz puts current line to center of screen
zb puts current line to bottom of screen

Convert all existing tabs to spaces:
:retab

Re-indent selection (visual mode):
=

Indent current line in Insert mode (regardless of cursor position):
C-t

De-indent current line in Insert mode (regardless of cursor position):
C-d

Indent/de-indent a block in visual mode:
>
<

Delete without yanking
<leader> d

Delete from start of line until cursor position (insert mode):
C-u

Delete from cursor position to end of line without new line:
vg_d

Delete non-matching lines:
:v/foo/d

Insert NUL byte (looks like ^@):
C-v 000

Reformat/re-indent a piece of text after selecting in visual mode:
gq

Show unsaved changes:
:w !diff % -

Reformat XML to human readable:
:%!xmllint --format %

Count matches:
:%s/foobar//n

Unwrap parapgraph in normal mode:
vipJ
Bind to F6

Pass current buffer to external command/script:
:%! my-script

Replace one or more spaces with a newline:
:%s/ \+/\r/g

Moving around
-------------

^   To the first non-blank character of the line.

C-o Go to the previous location

[{  Go to matching bracket

zz  Recenter the view (move current position to screen center)

Windows
-------

C-w c   Close current window but keep buffer open

C-w =   Resize windows after terminal size has changed

Using tags
----------

index recursively the current directory outside vim:
ctags -R .

index using easytags plugin in vim (tags stored ~/.vimtags):
:UpdateTags -R .

jump to tag definition:
Ctrl-]

pop tag (return to previous location):
Ctrl-T

taglist plugin, show tag window:
:TlistToggle

navigate between windows in vim:
Ctrl-[hjkl]


Cscope
-------

Install 'cscope' package
Install pycscope: sudo pip install pycscope

run in source root directory:
cscope -R -b

TODO: document cscope_dynamic usage


MiniBufExplorer
---------------

Switching between buffers:
Ctrl-^              previous buffer
num-ctrl-^          switch to buffer <num>num
Ctrl-hjkl and Tab   move to MBE window and select buffer with cursor

Reopen the last closed buffer:
:tabnew#


Alternate (a.vim)
-----------------

:A      Open header/source in the same window
:AS     Open header/source in new horizontal split


Clipboard (textobj-user, textobj-line)
--------------------------------------

.vimrc:
set clipboard=unnamed

Yank/delete text copies to system clipboard. Copying a line includes also the
newline character. To omit the newline use texobj-line:
vil     select inner part
val     select whole line

TODO: does clipmenu need configuration to sync primary and clipboard?


Sessions
--------

Save current editor state:
:mks ~/.vim/sessions/rooster.vim

Load on editor start:
$ vim -S ~/.vim/sessions/rooster.vim


Spell check
-----------

Show spell check:
:set spell

Show suggestions for word under cursor:
z=

Save new word:
zg

Previous and next hit:
[s
]s

More info:
https://www.ostechnix.com/use-spell-check-feature-vim-text-editor/

Mark (bookmark a line and column)
---------------------------------

Mark current line to a letter 'a':
ma

Go to mark 'a':
'a

Build and dispatch
------------------

From vim, build with default build tool 'make':
m-<Enter>

Run a test/binary/etc without blocking editor
:Dispatch ./main

Visual blocks
-------------

Sorting:
Select a block, for example:
    press 'V' and navigate lines
    enter command by pressing ':'
    type 'sort' or 'sort -u' command and press enter

Select rectangular section:
example: paste git commit message with preceding whitespaces
Ctrl-v to enter mode
Select section with normal navigation
Press 'd' to delete

Macros
------

Swap words in the following line:
{0x42,  66},    //  B

Start recording: q1

go to start of line: 0
go to next word: w
cut word: dw
move to start of next word: w
paste in the front: P
move cursor past paste: l
cut second item: dw
move to open brace: 0
paste: p
down: j

Stop recording: q
Run macro: @1
Repeat last macro: @@

fzf
---

Search syntax:

Token	Match type					Description
sbtrkt	fuzzy-match					Items that match sbtrkt
'wild	exact-match (quoted)		Items that include wild
^music	prefix-exact-match			Items that start with music
.mp3$	suffix-exact-match			Items that end with .mp3
!fire	inverse-exact-match			Items that do not include fire
!^music	inverse-prefix-exact-match	Items that do not start with music
!.mp3$	inverse-suffix-exact-match	Items that do not end with .mp3

Binary files
------------

Using hexmode plugin open any file in binary mode:
vim -b file.bin


Table mode
----------
https://github.com/dhruvasagar/vim-table-mode

Table mode:
<leader> tm

Start the first line with '|' and enter each cell
Start the next line with '||' to get horizontal line
Continue entering cell content and closing cell with '|'
Close the top (line) of the table similarly with '||'


