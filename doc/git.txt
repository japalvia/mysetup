Git less commonly needed tricks
===============================

Search for a file in all branches:
git log --all -- '**/some_file'

View file from another local branch without switching to it:
git show <branch>:<file path>

Grep in a specific branch:
git grep <regexp> branch

Prune remote branches that were removed by someone else/other clone:
git remote prune origin

Forking upstream and following it
---------------------------------

git remote add upstream https://github.com/user/repo.git
git fetch upstream
git checkout -b upstream_master --track upstream/master


Rewrite incorrect email/user in commit history:
-----------------------------------------------

git checkout -b fix_author
git filter-branch -f --env-filter \
    'export GIT_AUTHOR_EMAIL="address" ; export GIT_AUTHOR_NAME="name"'
git checkout master
git rebase fix_author
# WARNING: force push will break remote for everyone else
git push -f origin master

Make a quick backup of local branch before rebasing
---------------------------------------------------

branch=$(git symbolic-ref --short HEAD) ;  git fetch . $branch:$branch-bak


Ignore a file that has only local changes
-----------------------------------------

Example: your local build requires a minor modification to a script/tool
that should not be pushed to remote but always needed to build.

git update-index --skip-worktree <file>

Resume tracking by:
git update-index --no-skip-worktree

List skipped files:
git ls-files -v | grep '^S'

TODO: is this better or worse than using git ignore?

Moving a change from a commit to another commit
-----------------------------------------------

Example history:
commit 123
commit 456
commit 789

Now, you realize commit 456 has a partial change in path foo/bar/goo.cpp
that should be part of commit 789. But commit 456 cannot be just squashed into
789 as it has unrelated stuff. So, let's make a patch from the problematic part:
$ git format-patch -1 456 -- foo/bar/goo.cpp

Next, start an interactive rebase where the change is removed using 'edit' option
for both 789 and 456 commits:
$ git rebase -i 789^

For commit 789, apply the formatted patch:
$ git apply < 0001-some-commit-title.patch
$ git rebase --continue

For commit 456, checkout foo/bar/goo.cpp from earlier version during rebase edit:
$ git checkout 789 -- foo/bar/goo.cpp
$ git rebase --continue

Show a graph of commit history
------------------------------

$ git log --oneline --graph --decorate --all

Stash
-----

Stash per file:
git stash push -m "message" -- [path]

Submodules
----------

Remove a submodule:
git submodule deinit dotfiles/.vim/bundle/ragel
git rm --cached dotfiles/.vim/bundle/ragel
rm -rf .git/modules/dotfiles/.vim/bundle/ragel
.gitmodules still needs manually removing the submodules

Backport commits to renamed files
---------------------------------

git config merge.renameLimit 999999
git cherry-pick -X rename-threshold=25%

Merge tools
-----------

Resolving merge conflicts with external tools:
git config --global merge.tool meld
Disable prompt, open automatically default tool:
git config --global mergetool.prompt false

Invoke tool manually:
git mergetool

Meld:
Left panel contains the HEAD before the conflicting commit
Center panel contains the base that the new commit expect
Right panel contains the changes on top of base

LOCAL - the head for the file(s) from the current branch on the machine that you are using.
REMOTE - the head for files(s) from a remote location that you are trying to merge into your LOCAL branch.
BASE - the common ancestor(s) of LOCAL and REMOTE.
MERGED - the tag / HEAD object after the merge - this is saved as a new commit.

proxy
-----

git:// url needs a separate tunneling for proxy connection, see bin/gitproxy
Alternative if pushing is not required:
git config --global url.https://github.com/.insteadOf git://github.com/

Patching
--------

Apply format-patch (0001-commit-message-here.patch) using the original commit and signing off
yourself:
git am --whitespace=fix --signoff < 0001-commit-message-here.patch

